package com.shen.crm.workbench.mapper;

import com.shen.crm.workbench.domain.Activity;
import com.shen.crm.workbench.domain.FunnelVO;

import java.util.List;
import java.util.Map;

public interface ActivityMapper {

    List<FunnelVO> selectCountOfActivityGroupByOwner();

    /**
     * 通过市场活动名称进行模糊查询
     * @param activityName 市场活动模糊名称
     * @return 查询到的对应的市场活动
     */
    List<Activity> selectActivityByFuzzyName(String activityName);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    int insertActivity(Activity activity);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    int insertSelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    Activity selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    int updateByPrimaryKeySelective(Activity record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tbl_activity
     *
     * @mbggenerated Sun Jan 01 20:35:06 CST 2023
     */
    int updateByPrimaryKey(Activity record);

    List<Activity> selectActivityByConditionForPage(Map<String, Object> map);

    int selectCountOfActivityByCondition(Map<String, Object> map);

    int deleteActivityByIds(String[] ids);

    Activity selectActivityById(String id);

    int updateActivity(Activity activity);

    List<Activity> selectAllActivitys();

    List<Activity> selectCheckedActivity(String[] id);

    int insertActivityByList(List<Activity> activityList);

    Activity selectActivityForDetaiByid(String id);

    /**
     * 根据ClueId查询
     *
     * @param clueId
     * @return
     */
    List<Activity> selectActivityForDetailByClueId(String clueId);

    List<Activity> selectActivityForDetailByNameClueId(Map<String, Object> map);

    /**
     * 根据id查询市场活动明细信息
     *
     * @param ids
     * @return
     */
    List<Activity> selectActivityForDetailByIds(String[] ids);

    /**
     * 根据Name模糊查询市场活动
     *
     * @param map
     * @return
     */
    List<Activity> selectActivityForConvertByNameAndClueId(Map<String, Object> map);

    /**
     * 通过联系人id查询该联系人绑定的所有市场活动
     * @param contactsId 联系人id
     * @return 市场活动集合
     */
    List<Activity> selectActivityForDetailByContactsId(String contactsId);

    /**
     * 通过市场活动名和联系人id模糊查询市场活动
     * @param map 封装的联系人id和市场活动名参数
     * @return 市场活动集合
     */
    List<Activity> selectActivityForDetailByNameAndContactsId(Map<String, Object> map);
}